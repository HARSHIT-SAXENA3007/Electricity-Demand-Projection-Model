model = Sequential()
model.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])))
model.add(Dropout(0.2))
model.add(LSTM(units=50, return_sequences=False))
model.add(Dropout(0.2))
model.add(Dense(units=25))
model.add(Dense(units=1))

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(X_train, y_train, batch_size=32, epochs=20, validation_data=(X_test, y_test))

# Get the start and end dates from user input
start_date = input("Enter the start date (YYYY-MM-DD): ")
end_date = input("Enter the end date (YYYY-MM-DD): ")

# Create a date range for the prediction period
prediction_dates = pd.date_range(start=start_date, end=end_date, freq='D')

# Create a DataFrame for the prediction period
prediction_data = pd.DataFrame(index=prediction_dates, columns=['Consumption', 'Temperature', 'Holiday', 'Day', 'Month', 'DayOfWeek'])

# Fill the prediction DataFrame with relevant data
prediction_data['Day'] = prediction_data.index.day
prediction_data['Month'] = prediction_data.index.month
prediction_data['DayOfWeek'] = prediction_data.index.dayofweek
prediction_data['Holiday'] = 0  # Assuming no holidays in the prediction period
prediction_data['Temperature'] = 20  # Assuming a constant temperature of 20 degrees Celsius
prediction_data['Consumption'] = 0  # Placeholder value for consumption

# Scale the features in the prediction DataFrame
prediction_data[['Temperature', 'Holiday', 'Day', 'Month', 'DayOfWeek']] = scaler_features.transform(prediction_data[['Temperature', 'Holiday', 'Day', 'Month', 'DayOfWeek']])

# Create sequences for prediction
prediction_seq = []
last_sequence = X[-sequence_length:]  # Get the last sequence from the original data

for i in range(len(prediction_data)):
    # Update the last sequence with the new data point
    new_sequence = np.append(last_sequence[1:], [prediction_data.iloc[i][['Consumption', 'Temperature', 'Holiday', 'Day', 'Month', 'DayOfWeek']].values], axis=0)
    prediction_seq.append(new_sequence)
    last_sequence = new_sequence

prediction_seq = np.array(prediction_seq)
